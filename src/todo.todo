
!!!INFO
// tira el error del default si importas con {}
//could not expand ZIP , solution: cd android && ./gradlew clean
//error: Unable to load script from assets index.android.bundle on windows . adb reverse tcp:8081 tcp:8081
//to see logs in device react-native log-android
// chmod 755 android/gradlew for could not install app in the device
// hacer .bind(this) si no puedo acceder this.props
//react-devtools
//debugger es localhost:8081 dev settings apretar DEBUG JS REMOTELY
//adentro del return no es necesario {} para hcef ternario(https://medium.com/@szholdiyarov/conditional-rendering-in-react-native-286351816db4)
// usar arrow functions to bind this y poder usar this props adentro updateLocalExpire = () => {}


Preguntar si me dejan publicar por ellos los del grupo su post en la app o si lo quieren hacer ellos

BUGS:
  ☐ error set state en postitem si no comento setstate user y setstateuser is liked



HOME:
✔ que no haga llamada ala api cada vez q entras al tab. usar storage con tiempo(checkear en client app como lo hice)
☐ ver si puedo poner loading central como habia hecho con los skeletons


☐ @high cuando agrego nuevo post me fijo el type y hago push a ese type de localstorage de  todos, y en el tabId q corresponda, si tiene data en localstorage sino agrego comun  

✔ ver si puedo pasar tab id en la declaracion de las tabs y comparar con this.props.tabId y si no es el mismo no correr funcion render
✔ hacer mocks para mostrar loading antes de entrar a cada tab, despues q estan cargados no mostrar no hacer api reqest
☐ cartel no hay posts
✔ maquetar adentro de sidebar tab notifications @done (2018-7-23 20:51:36)
✔ acomodar iconos header

  sidebar:
    ✔ hacer llamada a ala api de notifications y traer data real
    ☐ reemplazar userId por local storage logiado
    ☐ @low  ver si se puede poner sidebar desde el header que empuje poniendo en app.js inside or outside<Provider>
    ✔ hacer q la sidebar muestre contenido y oculte cuando se va
  card:
    ✔ like hacer llamada ala api (USAR AXIOS SI POST FETCH NO FUNCIONA)
    ✔ unlike hacer llamada ala api
    ✔  aumentar el likecount o bajar si es me gusta o no me gusta en el instante manipulando setstate
    ✔ Cambiar arrow right por: estrella sin marcar o marcada !! NO GUARDA EL FAVORITO CHECKEAR SI ESTA EN LOCAL STORAGE
    ☐ @high @high cuando haces me gusta guarda el numero pero despues en reload lo borra, no lo mantiene cuando cambias de tab
                  

    ☐usar moment para la fecha del post
    ☐comentar lleva a detail
    ☐click en image lleva a detail
    ☐compartir
    ☐reemplar userId por local storage

DETAIL:
//usar mismo postitem para detail 
// hacer logica de apretar y ver todos los comentarios si son mas de 10 en el mismo postitem
// hacer si actions.isdetail no hacer nada en el click de la foto


LOGIN:
  ☐ @high iniciar sesion cuando lo necesite,(crear post, tedeja entrar profile pero te muestra mockup profile,
  te muestra los favs, pero lodemas te tenes q logiar, para comentar y para poner like tambien necesitas logiarte)
 )
- maquetar imagen de fondo ,titulo, y boton
- login facebook

NEW POST:
  solo si esta logiado
-agregar inputs
-subir foto, sacar foto

-pasar a carpeta componentes los componentes

PROFILE:
    pedir user getUser
    -remove post tacho basura arriba ala derecha
API.removePost(this.props.item._id, this.props.item.user._id).then((result) => {
  console.log("removepostAPI", result)
  this.state.user.countPost = this.state.user.countPost - 1;
  this.setState({ user: this.state.user });
}).catch((err) => {
  console.log("err removing", err)
})







//ADD COMMENT
var comment = {
    postId: $scope.post._id,
    userIdPostCreated: $scope.post.user._id == userId ? null : $scope.post.user._id,
    user: {
        _id: userId,
        name: user.name,
        picture: user.picture,
    },
    body: $scope.answer.body,
    created: date
};



saveLocalExpire(key, jsonData, expirationMin) {
    //this.storage.get(key).then((data) => {
      //console.log("savelocalexpire", data)
      //if(!data) {
        //return false;
      //}
      let expirationMS = expirationMin * 60 * 1000;
      let record = { value: jsonData, timestamp: new Date().getTime() + expirationMS };
      this.storage.set(key, record)
      return jsonData;
    //})
  }

  getLocalExpire(key) {
    return new Promise((resolve, reject) => {
      this.storage.get(key).then((data) => {
        if(!data) {
          resolve(false);
          return;
        }
        console.log("CONDITION", new Date().getTime() < data.timestamp && data.value)
        resolve (new Date().getTime() < data.timestamp && data.value);
      })
    })
  }


    //checkea si la condicion del tiempo ya expiro
  this.propertiesService.getLocalExpire("slideshow").then((slideShowLocalStorage) => {
        if (!slideShowLocalStorage) {
          //HACER LLAMADA A ALA API
          this.propertiesService.saveLocalExpire('slideshow', dataAPI, 30);
        } else {
          this.storage.get("slideshow").then((data) => {
            this.properties = data
          })


